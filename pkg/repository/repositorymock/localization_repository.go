// Code generated by mockery v1.0.0. DO NOT EDIT.

package repositorymock

import localization "github.com/darianfd99/geo/pkg"
import mock "github.com/stretchr/testify/mock"

// LocalizationRepository is an autogenerated mock type for the LocalizationRepository type
type LocalizationRepository struct {
	mock.Mock
}

// DeleteAll provides a mock function with given fields:
func (_m *LocalizationRepository) DeleteAll() ([]localization.Localization, error) {
	ret := _m.Called()

	var r0 []localization.Localization
	if rf, ok := ret.Get(0).(func() []localization.Localization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]localization.Localization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *LocalizationRepository) GetAll() ([]localization.Localization, error) {
	ret := _m.Called()

	var r0 []localization.Localization
	if rf, ok := ret.Get(0).(func() []localization.Localization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]localization.Localization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: loc
func (_m *LocalizationRepository) Save(loc localization.Localization) error {
	ret := _m.Called(loc)

	var r0 error
	if rf, ok := ret.Get(0).(func(localization.Localization) error); ok {
		r0 = rf(loc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetList provides a mock function with given fields: list
func (_m *LocalizationRepository) SetList(list []localization.Localization) error {
	ret := _m.Called(list)

	var r0 error
	if rf, ok := ret.Get(0).(func([]localization.Localization) error); ok {
		r0 = rf(list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
